/**
 * @file Pin.cpp
 * @brief 实现Pin Net数据的序列化、反序列化、类型检查、连接验证等
 * @author Generated by create_project_structure.sh
 * @date 2025-06-12
 */

#include "Pin.h"

namespace dm {
// TODO: Implement the functionality here
YAML::Node Pin::to_yaml() {
  YAML::Node node;
  // pack for arc analyser
  node["name"] = name;
  node["incr_delay"] = incr_delay;
  node["path_delay"] = path_delay;
  node["location"] = YAML::Node();
  node["location"].push_back(location.first);
  node["location"].push_back(location.second);
  node.SetStyle(YAML::EmitterStyle::Flow);
  return node;
}

nlohmann::json Pin::to_json() {
  nlohmann::json node;
  node["name"] = name;
  node["incr_delay"] = incr_delay;
  node["path_delay"] = path_delay;
  node["location"] = nlohmann::json::array({location.first, location.second});
  node["is_input"] = is_input;
  node["trans"] = trans;
  node["cell"] = cell;
  node["rf"] = rise_fall;

  if (pta_buf.has_value()) {
    node["pta_buf"] = pta_buf.value();
  }

  if (pta_net.has_value()) {
    node["pta_net"] = pta_net.value();
  }

  return node;
}

nlohmann::json Net::to_json() {
  nlohmann::json node = {
      {"name", name},
      {"fanout", fanout},
      {"cap", cap},
  };
  return node;
}
}  // namespace dm
